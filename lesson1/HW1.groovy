/**
 * Created by Killgur on 16.10.2015.
 * First homework
 */
println '''
================================================================================================
                                Первая часть домашнего задания:

Нужно использовать как минимум 3 переменных разных типов (типы должны логически соответствовать)
                     Описать в коде флаг для краткой и длинной версии интро
================================================================================================
'''

println '---------------------------------------------------------------------------------------------\nЛинейный вывод:\n'

byte age = 34
String name = 'Алексей'
String preferences = 'спорт, авто, рок-н-ролл'
def experience = 11

def printLongVersion = {println "Привет, меня зовут ${name}, мне ${age} года.\nПомимо программирования на Groovy :) меня инетерсуют ${preferences}.\nДо недавнего времени я работал инженером около ${experience} лет.\n"}
def printShortVersion = {println "Привет, меня зовут ${name}, мне ${age} года.\nДо недавнего времени я работал инженером около ${experience} лет.\n"}

boolean isShortVersion = false
println 'Длинная версия:\n'
isShortVersion ? printShortVersion() : printLongVersion()

isShortVersion = true
println 'Короткая версия:\n'
isShortVersion ? printShortVersion() : printLongVersion()

println '---------------------------------------------------------------------------------------------'

println '---------------------------------------------------------------------------------------------\nСоздание простенького класса:\n'

class UserIntro {
    byte age
    String name
    String preferences
    double experience

    def printLongVersion = {
        println 'Длинная версия:\n'
        println "Привет, меня зовут ${name}, мне ${age} года.\nПомимо программирования на Groovy :) меня инетерсуют ${preferences}.\nДо недавнего времени я работал инженером ${experience} лет.\n"
    }

    def printShortVersion = {
        println 'Короткая версия:\n'
        println "Привет, меня зовут ${name}, мне ${age} года.\nДо недавнего времени я работал инженером ${experience} лет.\n"
    }
}

UserIntro me = new UserIntro(age: 34, name: 'Алексей', preferences: 'спорт, авто, рок-н-ролл', experience: 10.5)

isShortVersion = false
isShortVersion ? me.printShortVersion() : me.printLongVersion()

isShortVersion = true
isShortVersion ? me.printShortVersion() : me.printLongVersion()

println '---------------------------------------------------------------------------------------------'

println '''
=============================================================================================
                            Вторя часть домашнего задания:

Используя последние 2 цифры своего номера моб. телефона как число и 2 перед ними как степень.
        Cравнить результат с вычислением степени через логарифм или через Java Math.
=============================================================================================
'''

int a = 60
int b = 98

println """
---------------------------------------------------------------------------------------------
Простой вывод результата в многострочной строке типа GString:

Результат возведения в степень средствами Groovy a**b: ${a}^${b} = ${a**b}, результат возведения в степень имеет тип: ${(a**b).class.name}
Результат возведения в степень через модуль Math: ${a}^${b} = ${Math.pow(a, b)}, результат возведения в степень имеет тип: ${Math.pow(a, b).class.name}
Результат возведения в степень через натуральный логарифм: ${a}^${b} = ${Math.exp(b*Math.log(a))}, результат возведения в степень имеет тип: ${Math.exp(b*Math.log(a)).class.name}
---------------------------------------------------------------------------------------------
"""

println '---------------------------------------------------------------------------------------------\nВывод с использованием Closure:\n'

def power = a**b
def printPower = {println "${a}^${b} = ${power}, результат возведения в степень имеет тип: ${power.class.name}"}

printPower()

power = Math.pow(a, b)
printPower()

power = Math.exp(b*Math.log(a))
printPower()

println '---------------------------------------------------------------------------------------------'

println '---------------------------------------------------------------------------------------------\nВывод с использованием передачи одного параметра в Closure:\n'

def printPowerWithOneParam = {pow -> println "${a}^${b} = ${pow}, результат возведения в степень имеет тип: ${pow.class.name}"}

printPowerWithOneParam(a**b)
printPowerWithOneParam(Math.pow(a, b))
printPowerWithOneParam(Math.exp(b*Math.log(a)))

println '---------------------------------------------------------------------------------------------'

println '---------------------------------------------------------------------------------------------\nВывод с использованием передачи нескольких параметров в Closure:\n'
def printPowerWithManyParams = {s, pow -> println "${s} ${a}^${b} = ${pow}, результат возведения в степень имеет тип: ${pow.class.name}"}

printPowerWithManyParams("Результат возведения в степень средствами Groovy a**b:", a**b)
printPowerWithManyParams("Результат возведения в степень через модуль Math:", Math.pow(a, b))
printPowerWithManyParams("Результат возведения в степень через натуральный логарифм:", Math.exp(b*Math.log(a)))

println '---------------------------------------------------------------------------------------------'

println '---------------------------------------------------------------------------------------------\nВывод с использованием объявления методов:\n'

def powerGroovy(base, pow) {
//    return base**pow
    base**pow
}

def powerMath(base, pow) {
//    return Math.pow(base, pow)
    Math.pow(base, pow)
}

def powerLog(base, pow) {
//    return Math.exp(pow*Math.log(base))
    Math.exp(pow*Math.log(base))
}

power = powerGroovy(a, b)
println "Результат возведения в степень средствами Groovy a**b: ${a}^${b} = ${power}, результат возведения в степень имеет тип: ${power.class.name}"

power = powerMath(a, b)
println "Результат возведения в степень через модуль Math: ${a}^${b} = ${power}, результат возведения в степень имеет тип: ${power.class.name}"

power = powerLog(a, b)
println "Результат возведения в степень через натуральный логарифм: ${a}^${b} = ${power}, результат возведения в степень имеет тип: ${power.class.name}"

println '---------------------------------------------------------------------------------------------'

// println '---------------------------------------------------------------------------------------------\nТест на соответствие результата типу значения:\n'
println '---------------------------------------------------------------------------------------------\nТест:\n'

def testClass() {
    given:
    int a = 60
    int b = 98
    when:
    println("Результат возведения в степень средствами Groovy a**b: ${a}^${b} = ${a**b}")
    println("Результат возведения в степень через модуль Math: ${a}^${b} = ${Math.pow(a, b)}")
    println("Результат возведения в степень через натуральный логарифм: ${a}^${b} = ${Math.exp(b*Math.log(a))}")
    then:
    assert (a**b).class == BigInteger
    assert Math.pow(a, b).class == Double
    assert Math.exp(b*Math.log(a)).class == Double

    assert (a**b) instanceof BigInteger
    assert Math.pow(a, b) instanceof Double
    assert Math.exp(b*Math.log(a)) instanceof Double

    assert a**b == 1814773954166863628046361853216827279269843640202652420952977684359714281881600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    assert Math.pow(a, b) == 1.8147739541668635e174
    assert Math.exp(b*Math.log(a)) == 1.8147739541668317e174
}

testClass()

println '---------------------------------------------------------------------------------------------'


/* println '---------------------------------------------------------------------------------------------\nТест на соответствие результата:\n'

def testPower() {
    given:
        int a = 60
        int b = 98
    when:
        println("Результат возведения в степень средствами Groovy a**b: ${a}^${b} = ${a**b}")
        println("Результат возведения в степень через модуль Math: ${a}^${b} = ${Math.pow(a, b)}")
        println("Результат возведения в степень через натуральный логарифм: ${a}^${b} = ${Math.exp(b*Math.log(a))}")
    then:
        assert a**b == 1814773954166863628046361853216827279269843640202652420952977684359714281881600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        assert Math.pow(a, b) == 1.8147739541668635e174
        assert Math.exp(b*Math.log(a)) == 1.8147739541668317e174
}

testPower()

println '---------------------------------------------------------------------------------------------' */