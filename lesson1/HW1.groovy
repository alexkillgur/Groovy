/**
 * Created by Killgur on 16.10.2015.
 * First homework
 */
println '''
=============================================================================================
                            Вторя часть домашнего задания:

Используя последние 2 цифры своего номера моб. телефона как число и 2 перед ними как степень.
        Cравнить результат с вычислением степени через логарифм или через Java Math.
=============================================================================================
'''

int a = 60
int b = 98

println """
---------------------------------------------------------------------------------------------
Простой вывод результата в многострочной строке типа GString:

Результат возведения в степень средствами Groovy a**b: ${a}^${b} = ${a**b}, результат возведения в степень имеет тип: ${(a**b).class.name}
Результат возведения в степень через модуль Math: ${a}^${b} = ${Math.pow(a, b)}, результат возведения в степень имеет тип: ${Math.pow(a, b).class.name}
Результат возведения в степень через натуральный логарифм: ${a}^${b} = ${Math.exp(b*Math.log(a))}, результат возведения в степень имеет тип: ${Math.exp(b*Math.log(a)).class.name}
---------------------------------------------------------------------------------------------
"""

println '---------------------------------------------------------------------------------------------\nВывод с использованием Closure:\n'
def power = a**b
def printPower = {println "${a}^${b} = ${power}, результат возведения в степень имеет тип: ${power.class.name}"}

printPower()

power = Math.pow(a, b)
printPower()

power = Math.exp(b*Math.log(a))
printPower()

println '---------------------------------------------------------------------------------------------'

println '---------------------------------------------------------------------------------------------\nВывод с использованием передачи одного параметра в Closure:\n'
def printPowerWithOneParam = {pow -> println "${a}^${b} = ${pow}, результат возведения в степень имеет тип: ${pow.class.name}"}

printPowerWithOneParam(a**b)
printPowerWithOneParam(Math.pow(a, b))
printPowerWithOneParam(Math.exp(b*Math.log(a)))

println '---------------------------------------------------------------------------------------------'

println '---------------------------------------------------------------------------------------------\nВывод с использованием передачи нескольких параметров в Closure:\n'
def printPowerWithManyParams = {s, pow -> println "${s} ${a}^${b} = ${pow}, результат возведения в степень имеет тип: ${pow.class.name}"}

printPowerWithManyParams("Результат возведения в степень средствами Groovy a**b:", a**b)
printPowerWithManyParams("Результат возведения в степень через модуль Math:", Math.pow(a, b))
printPowerWithManyParams("Результат возведения в степень через натуральный логарифм:", Math.exp(b*Math.log(a)))

println '---------------------------------------------------------------------------------------------'

println '---------------------------------------------------------------------------------------------\nВывод с использованием объявления методов:\n'

def powerGroovy(base, pow) {
    return base**pow
}

def powerMath(base, pow) {
    return Math.pow(base, pow)
}

def powerLog(base, pow) {
    return Math.exp(pow*Math.log(base))
}

power = powerGroovy(a, b)
println "Результат возведения в степень средствами Groovy a**b: ${a}^${b} = ${power}, результат возведения в степень имеет тип: ${power.class.name}"

power = powerMath(a, b)
println "Результат возведения в степень через модуль Math: ${a}^${b} = ${power}, результат возведения в степень имеет тип: ${power.class.name}"

power = powerLog(a, b)
println "Результат возведения в степень через натуральный логарифм: ${a}^${b} = ${power}, результат возведения в степень имеет тип: ${power.class.name}"

println '---------------------------------------------------------------------------------------------'

println '---------------------------------------------------------------------------------------------\nТест на соответствие результата типу значения:\n'

def testClass() {
    given:
    int a = 60
    int b = 98
    when:
    println("Результат возведения в степень средствами Groovy a**b: ${a}^${b} = ${a**b}")
    println("Результат возведения в степень через модуль Math: ${a}^${b} = ${Math.pow(a, b)}")
    println("Результат возведения в степень через натуральный логарифм: ${a}^${b} = ${Math.exp(b*Math.log(a))}")
    then:
    assert (a**b).class == BigInteger
    assert Math.pow(a, b).class == Double
    assert Math.exp(b*Math.log(a)).class == Double

    assert (a**b) instanceof BigInteger
    assert Math.pow(a, b) instanceof Double
    assert Math.exp(b*Math.log(a)) instanceof Double
}

testClass()

println '---------------------------------------------------------------------------------------------'


println '---------------------------------------------------------------------------------------------\nТест на соответствие результата:\n'

def testPower() {
    given:
    int a = 60
    int b = 98
    when:
    println("Результат возведения в степень средствами Groovy a**b: ${a}^${b} = ${a**b}")
    println("Результат возведения в степень через модуль Math: ${a}^${b} = ${Math.pow(a, b)}")
    println("Результат возведения в степень через натуральный логарифм: ${a}^${b} = ${Math.exp(b*Math.log(a))}")
    then:
    assert a**b == 1814773954166863628046361853216827279269843640202652420952977684359714281881600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    assert Math.pow(a, b) == 1.8147739541668635E174
    assert Math.exp(b*Math.log(a)) == 1.8147739541668317E174
}

testPower()

println '---------------------------------------------------------------------------------------------'